/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[6,12],$V3=[1,25],$V4=[1,26],$V5=[1,27],$V6=[1,28],$V7=[1,29],$V8=[1,30],$V9=[15,24,26,27,28,29,30],$Va=[10,32,48],$Vb=[2,48],$Vc=[9,15,24,26,27,28,29,30,43,44,45,50,56,58,62,64,65,70,71],$Vd=[1,47],$Ve=[1,46],$Vf=[1,44],$Vg=[1,45],$Vh=[1,48],$Vi=[1,49],$Vj=[1,50],$Vk=[1,51],$Vl=[1,52],$Vm=[1,53],$Vn=[1,64],$Vo=[1,63],$Vp=[1,65],$Vq=[1,66],$Vr=[1,67],$Vs=[1,68],$Vt=[1,69],$Vu=[1,70],$Vv=[1,71],$Vw=[1,72],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[1,76],$VB=[10,22,32,63,68,69,72,74,75,76,77,78,79,80,81,82,83,84,85,86],$VC=[1,120],$VD=[2,40],$VE=[1,127],$VF=[1,128],$VG=[1,129],$VH=[1,121],$VI=[1,122],$VJ=[1,123],$VK=[1,124],$VL=[1,125],$VM=[1,126],$VN=[10,22,32,63,68,69,72,74,79,80,81,82,83,84,85,86],$VO=[10,22,32,63,68,69,72,74,75,76,77,79,80,81,82,83,84,85,86],$VP=[10,22,32,63,68,69,79,80,81,82,83,84,85,86],$VQ=[10,22,32,63,68,69,83,84,85,86],$VR=[15,62,64],$VS=[9,15,26,27,28,29,30,43,44,45,50,56,58,62,64,65,70,71],$VT=[1,211],$VU=[1,210],$VV=[15,64];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"IMPORTLIST":4,"CLASSLIST":5,"EOF":6,"FINALIMPORT":7,"import":8,"id":9,"SEMICOLON":10,"FINALCLASS":11,"class":12,"S_OPEN_KEY":13,"INSIDECLASS":14,"S_CLOSE_KEY":15,"FINALINSIDECLASS":16,"DECLARATIONSENTENCE":17,"METHODSFUN":18,"TYPE":19,"S_OPEN_PARENTHESIS":20,"PARAMETERDECLARATION":21,"S_CLOSE_PARENTHESIS":22,"SENTENCESLIST":23,"void":24,"main":25,"WR_INT":26,"WR_DOUBLE":27,"WR_CHAR":28,"WR_STRING":29,"WR_BOOLEAN":30,"PARAMETER":31,"S_COMMA":32,"ASSIGNMENTORCALLSENTENCE":33,"PRINTSENTENCE":34,"IFELSESENTENCE":35,"SWITCHSENTENCE":36,"FORSENTENCE":37,"WHILESENTENCE":38,"DOWHILESENTENCE":39,"CONTINUESENTENCE":40,"BREAKSENTENCE":41,"RETURNSENTENCE":42,"continue":43,"break":44,"return":45,"EXPRESSION":46,"IDLIST":47,"S_EQUALS":48,"EXPRESSIONLIST":49,"System":50,"S_POINT":51,"out":52,"PRINTOPT":53,"print":54,"println":55,"if":56,"else":57,"switch":58,"CASELIST":59,"OPTDEFAULT":60,"CASEFINAL":61,"case":62,"S_TWOPOINTS":63,"default":64,"for":65,"ASSIGNMENTFOR":66,"INCDEC":67,"S_PLUSPLUS":68,"S_MINUSMINUS":69,"while":70,"do":71,"S_MINUS":72,"S_NOT":73,"S_PLUS":74,"S_MULTIPLY":75,"S_DIVISION":76,"S_MODULE":77,"S_POTENCY":78,"S_MAJOR":79,"S_MINOR":80,"S_MAJOREQUALS":81,"S_MINOREQUALS":82,"S_EQUALSEQUALS":83,"S_DIFFERENT":84,"S_OR":85,"S_AND":86,"Integer_Number":87,"Double_Number":88,"String_Literal":89,"Char_Literal":90,"true":91,"false":92,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"import",9:"id",10:"SEMICOLON",12:"class",13:"S_OPEN_KEY",15:"S_CLOSE_KEY",20:"S_OPEN_PARENTHESIS",22:"S_CLOSE_PARENTHESIS",24:"void",25:"main",26:"WR_INT",27:"WR_DOUBLE",28:"WR_CHAR",29:"WR_STRING",30:"WR_BOOLEAN",32:"S_COMMA",43:"continue",44:"break",45:"return",48:"S_EQUALS",50:"System",51:"S_POINT",52:"out",54:"print",55:"println",56:"if",57:"else",58:"switch",62:"case",63:"S_TWOPOINTS",64:"default",65:"for",68:"S_PLUSPLUS",69:"S_MINUSMINUS",70:"while",71:"do",72:"S_MINUS",73:"S_NOT",74:"S_PLUS",75:"S_MULTIPLY",76:"S_DIVISION",77:"S_MODULE",78:"S_POTENCY",79:"S_MAJOR",80:"S_MINOR",81:"S_MAJOREQUALS",82:"S_MINOREQUALS",83:"S_EQUALSEQUALS",84:"S_DIFFERENT",85:"S_OR",86:"S_AND",87:"Integer_Number",88:"Double_Number",89:"String_Literal",90:"Char_Literal",91:"true",92:"false"},
productions_: [0,[3,3],[3,2],[3,2],[3,1],[4,2],[4,1],[7,3],[5,2],[5,1],[11,5],[11,4],[14,2],[14,1],[16,1],[16,1],[18,8],[18,7],[18,8],[18,7],[18,7],[19,1],[19,1],[19,1],[19,1],[19,1],[21,3],[21,1],[31,2],[23,2],[23,2],[23,2],[23,2],[23,2],[23,2],[23,2],[23,2],[23,2],[23,2],[23,2],[23,0],[40,2],[41,2],[42,3],[42,2],[17,3],[17,5],[47,3],[47,1],[33,4],[33,4],[33,5],[34,6],[53,4],[53,3],[53,4],[53,3],[35,7],[35,11],[35,9],[36,8],[36,7],[36,7],[36,6],[59,2],[59,1],[61,4],[60,3],[37,11],[66,4],[66,3],[67,2],[67,2],[67,1],[38,7],[39,9],[46,2],[46,2],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,4],[46,3],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[49,3],[49,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return { AST: APIinstructions.root($$[$0-2], $$[$0-1]), LEXICAL_ERRORS: LexicalErrors, SINTACTICAL_ERRORS: undefined}; 
break;
case 2:
 return { AST: APIinstructions.root($$[$0-1], undefined), LEXICAL_ERRORS: LexicalErrors, SINTACTICAL_ERRORS: undefined}; 
break;
case 3:
 return { AST: APIinstructions.root(undefined, $$[$0-1]), LEXICAL_ERRORS: LexicalErrors, SINTACTICAL_ERRORS: undefined}; 
break;
case 4:
 return { AST: 'Vacio', LEXICAL_ERRORS: LexicalErrors, SINTACTICAL_ERRORS: undefined }; 
break;
case 5:
 this.$ = APIinstructions.newImportList($$[$0], $$[$0-1]); 
break;
case 6:
 this.$ = APIinstructions.newImportList(undefined, $$[$0]); 
break;
case 7:
 this.$ = APIinstructions.newImport($$[$0-1]); 
break;
case 8:
 this.$ = APIinstructions.newClassList($$[$0], $$[$0-1]); 
break;
case 9:
 this.$ = APIinstructions.newClassList(undefined, $$[$0]); 
break;
case 10:
 this.$ = APIinstructions.newClass($$[$0-3], $$[$0-1]); 
break;
case 11:
 this.$ = APIinstructions.newClass($$[$0-2], undefined); 
break;
case 12:
 this.$ = APIinstructions.newListInsideClass($$[$0], $$[$0-1]); 
break;
case 13:
 this.$ = APIinstructions.newListInsideClass(undefined, $$[$0]); 
break;
case 14: case 15: case 21: case 22: case 23: case 24: case 25:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = APIinstructions.newFunction($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 17:
 this.$ = APIinstructions.newFunction($$[$0-6], $$[$0-5], undefined, $$[$0-1]) 
break;
case 18:
 this.$ = APIinstructions.newMethod($$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 19: case 20:
 this.$ = APIinstructions.newMethod($$[$0-5], undefined, $$[$0-1]); 
break;
case 26:
 this.$ = APIinstructions.newParamsList($$[$0], $$[$0-2]); 
break;
case 27:
 this.$ = APIinstructions.newParamsList(undefined, $$[$0]); 
break;
case 28:
 this.$ = APIinstructions.newParam($$[$0-1], $$[$0]); 
break;
case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39:
 this.$ = APIinstructions.newSententenceList($$[$0], $$[$0-1]); 
break;
case 40:
 this.$ = undefined; 
break;
case 41:
 this.$ = APIinstructions.newContinue(); 
break;
case 42:
 this.$ = APIinstructions.newBreak(); 
break;
case 43:
 this.$ = APIinstructions.newReturn($$[$0-1]); 
break;
case 44:
 this.$ = APIinstructions.newReturn(undefined); 
break;
case 45:
 this.$ = APIinstructions.newDeclaration($$[$0-2], $$[$0-1]); 
break;
case 46:
 this.$ = APIinstructions.newDecAs($$[$0-4], $$[$0-3], $$[$0-1]); 
break;
case 47:
 this.$ = APIinstructions.newListIDs($$[$0-2], $$[$0]); 
break;
case 48:
 this.$ = APIinstructions.newListIDs(undefined, $$[$0]); 
break;
case 49:
 this.$ = APIinstructions.newAssignation($$[$0-3], $$[$0-1]); 
break;
case 50:
 this.$ = APIinstructions.newCallFun($$[$0-3], undefined); 
break;
case 51:
 this.$ = APIinstructions.newCallFun($$[$0-4], $$[$0-2]); 
break;
case 52: case 92:
 this.$ = $$[$0-1]; 
break;
case 53:
 this.$ = APIinstructions.newPrint("System.out.print", $$[$0-1]); 
break;
case 54:
 this.$ = APIinstructions.newPrint("System.out.print", undefined); 
break;
case 55:
 this.$ = APIinstructions.newPrint("System.out.println", $$[$0-1]); 
break;
case 56:
 this.$ = APIinstructions.newPrint("System.out.println", undefined); 
break;
case 57:
 this.$ = APIinstructions.newIf($$[$0-4], $$[$0-1], undefined, undefined); 
break;
case 58:
 this.$ = APIinstructions.newIf($$[$0-8], $$[$0-5], undefined, APIinstructions.newElse($$[$0-1])); 
break;
case 59:
 this.$ = APIinstructions.newIf($$[$0-6], $$[$0-3], APIinstructions.newElseIf($$[$0]), undefined); 
break;
case 60:
 this.$ = APIinstructions.newSwitch($$[$0-5], $$[$0-2], $$[$0-1]); 
break;
case 61:
 this.$ = APIinstructions.newSwitch($$[$0-4], $$[$0-1], undefined); 
break;
case 62:
 this.$ = APIinstructions.newSwitch($$[$0-4], undefined, $$[$0-1]); 
break;
case 63:
 this.$ = APIinstructions.newSwitch($$[$0-3], undefined, undefined); 
break;
case 64:
 this.$ = APIinstructions.newListCases($$[$0], $$[$0-1]); 
break;
case 65:
 this.$ = APIinstructions.newListCases(undefined, $$[$0]); 
break;
case 66:
 this.$ = APIinstructions.newCase($$[$0-2], $$[$0]); 
break;
case 67:
 this.$ = APIinstructions.newDefault($$[$0]); 
break;
case 68:
 this.$ = APIinstructions.newFor($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 69:
 this.$ = APIinstructions.newDeclarationFor($$[$0-3], $$[$0-2], $$[$0]); 
break;
case 70:
 this.$ = APIinstructions.newDeclarationFor(undefined, $$[$0-2], $$[$0]); 
break;
case 71: case 72:
 this.$ = APIinstructions.newNextFor($$[$0-1], $$[$0]); 
break;
case 73:
 this.$ = APIinstructions.newNextFor($$[$0], undefined); 
break;
case 74:
 this.$ = APIinstructions.newWhile($$[$0-4], $$[$0-1]); 
break;
case 75:
 this.$ = APIinstructions.newDoWhile($$[$0-2], $$[$0-6]); 
break;
case 76:
 this.$ = APIinstructions.newUnaryOP($$[$0], OPERATION_TYPE.NEGATE); 
break;
case 77:
 this.$ = APIinstructions.newUnaryOP($$[$0], OPERATION_TYPE.NOT); 
break;
case 78:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.ADDITION) 
break;
case 79:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.SUBTRACTION) 
break;
case 80:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.MULTIPLICATION) 
break;
case 81:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.DIVISION) 
break;
case 82:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.MODULE) 
break;
case 83:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.POTENCY) 
break;
case 84:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.MAJOR_THAN) 
break;
case 85:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.LESS_THAN) 
break;
case 86:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.MAJOR_EQUALS_THAN) 
break;
case 87:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.LESS_EQUALS_THAN) 
break;
case 88:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.EQUALS_EQUALS) 
break;
case 89:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.DIFFERENT) 
break;
case 90:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.OR) 
break;
case 91:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.AND) 
break;
case 93:
 this.$ = APIinstructions.newCallFun($$[$0-3], $$[$0-1]); 
break;
case 94:
 this.$ = APIinstructions.newCallFun($$[$0-2], undefined); 
break;
case 95:
 this.$ = APIinstructions.newValue($$[$0], TYPES.ID); 
break;
case 96:
 this.$ = APIinstructions.newValue($$[$0], TYPES.INTEGER); 
break;
case 97:
 this.$ = APIinstructions.newValue($$[$0], TYPES.DOUBLE); 
break;
case 98:
 this.$ = APIinstructions.newValue($$[$0], TYPES.STRING); 
break;
case 99:
 this.$ = APIinstructions.newValue($$[$0], TYPES.CHAR); 
break;
case 100: case 101:
 this.$ = APIinstructions.newValue($$[$0], TYPES.BOOLEAN); 
break;
case 102:
 this.$ = APIinstructions.newListExpression($$[$0], $$[$0-2]); 
break;
case 103:
 this.$ = APIinstructions.newListExpression(undefined, $$[$0]); 
break;
}
},
table: [{3:1,4:2,5:3,6:[1,4],7:5,8:$V0,11:6,12:$V1},{1:[3]},{5:9,6:[1,10],11:6,12:$V1},{6:[1,11]},{1:[2,4]},o($V2,[2,6],{7:5,4:12,8:$V0}),{5:13,6:[2,9],11:6,12:$V1},{9:[1,14]},{9:[1,15]},{6:[1,16]},{1:[2,2]},{1:[2,3]},o($V2,[2,5]),{6:[2,8]},{10:[1,17]},{13:[1,18]},{1:[2,1]},o([6,8,12],[2,7]),{14:19,15:[1,20],16:21,17:22,18:23,19:24,24:$V3,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8},{15:[1,31]},o($V2,[2,11]),{14:32,15:[2,13],16:21,17:22,18:23,19:24,24:$V3,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8},o($V9,[2,14]),o($V9,[2,15]),{9:[1,34],47:33},{9:[1,35],25:[1,36]},{9:[2,21]},{9:[2,22]},{9:[2,23]},{9:[2,24]},{9:[2,25]},o($V2,[2,10]),{15:[2,12]},{10:[1,37],32:[1,39],48:[1,38]},o($Va,$Vb,{20:[1,40]}),{20:[1,41]},{20:[1,42]},o($Vc,[2,45]),{9:$Vd,20:$Ve,46:43,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:[1,54]},{19:58,21:55,22:[1,56],26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:57},{19:58,21:59,22:[1,60],26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:57},{22:[1,61]},{10:[1,62],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{9:$Vd,20:$Ve,46:77,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:$Vd,20:$Ve,46:78,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:$Vd,20:$Ve,46:79,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},o($VB,[2,95],{20:[1,80]}),o($VB,[2,96]),o($VB,[2,97]),o($VB,[2,98]),o($VB,[2,99]),o($VB,[2,100]),o($VB,[2,101]),o($Va,[2,47]),{22:[1,81]},{13:[1,82]},{22:[2,27],32:[1,83]},{9:[1,84]},{22:[1,85]},{13:[1,86]},{13:[1,87]},o($Vc,[2,46]),{9:$Vd,20:$Ve,46:88,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:$Vd,20:$Ve,46:89,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:$Vd,20:$Ve,46:90,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:$Vd,20:$Ve,46:91,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:$Vd,20:$Ve,46:92,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:$Vd,20:$Ve,46:93,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:$Vd,20:$Ve,46:94,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:$Vd,20:$Ve,46:95,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:$Vd,20:$Ve,46:96,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:$Vd,20:$Ve,46:97,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:$Vd,20:$Ve,46:98,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:$Vd,20:$Ve,46:99,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:$Vd,20:$Ve,46:100,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:$Vd,20:$Ve,46:101,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},o($VB,[2,76]),o($VB,[2,77]),{22:[1,102],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{9:$Vd,20:$Ve,22:[1,104],46:105,49:103,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{13:[1,106]},{9:$VC,15:$VD,17:108,19:119,23:107,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM},{19:58,21:130,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:57},o([22,32],[2,28]),{13:[1,131]},{9:$VC,15:$VD,17:108,19:119,23:132,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM},{9:$VC,15:$VD,17:108,19:119,23:133,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM},o($VN,[2,78],{75:$Vp,76:$Vq,77:$Vr,78:$Vs}),o($VN,[2,79],{75:$Vp,76:$Vq,77:$Vr,78:$Vs}),o($VO,[2,80],{78:$Vs}),o($VO,[2,81],{78:$Vs}),o($VO,[2,82],{78:$Vs}),o($VB,[2,83]),o($VP,[2,84],{72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs}),o($VP,[2,85],{72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs}),o($VP,[2,86],{72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs}),o($VP,[2,87],{72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs}),o($VQ,[2,88],{72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw}),o($VQ,[2,89],{72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw}),o([10,22,32,63,68,69,85],[2,90],{72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,86:$VA}),o([10,22,32,63,68,69,85,86],[2,91],{72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy}),o($VB,[2,92]),{22:[1,134]},o($VB,[2,94]),{22:[2,103],32:[1,135],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{9:$VC,15:$VD,17:108,19:119,23:136,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM},{15:[1,137]},o($VR,$VD,{17:108,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,19:119,23:138,9:$VC,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM}),o($VR,$VD,{17:108,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,19:119,23:139,9:$VC,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM}),o($VR,$VD,{17:108,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,19:119,23:140,9:$VC,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM}),o($VR,$VD,{17:108,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,19:119,23:141,9:$VC,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM}),o($VR,$VD,{17:108,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,19:119,23:142,9:$VC,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM}),o($VR,$VD,{17:108,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,19:119,23:143,9:$VC,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM}),o($VR,$VD,{17:108,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,19:119,23:144,9:$VC,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM}),o($VR,$VD,{17:108,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,19:119,23:145,9:$VC,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM}),o($VR,$VD,{17:108,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,19:119,23:146,9:$VC,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM}),o($VR,$VD,{17:108,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,19:119,23:147,9:$VC,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM}),o($VR,$VD,{17:108,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,19:119,23:148,9:$VC,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM}),{9:[1,149],47:33},{20:[1,151],48:[1,150]},{51:[1,152]},{20:[1,153]},{20:[1,154]},{20:[1,155]},{20:[1,156]},{13:[1,157]},{10:[1,158]},{10:[1,159]},{9:$Vd,10:[1,161],20:$Ve,46:160,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{22:[2,26]},{9:$VC,15:$VD,17:108,19:119,23:162,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM},{15:[1,163]},{15:[1,164]},o($VB,[2,93]),{9:$Vd,20:$Ve,46:105,49:165,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{15:[1,166]},o($V9,[2,17]),o($VR,[2,29]),o($VR,[2,30]),o($VR,[2,31]),o($VR,[2,32]),o($VR,[2,33]),o($VR,[2,34]),o($VR,[2,35]),o($VR,[2,36]),o($VR,[2,37]),o($VR,[2,38]),o($VR,[2,39]),o($Va,$Vb),{9:$Vd,20:$Ve,46:167,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:$Vd,20:$Ve,22:[1,168],46:105,49:169,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{52:[1,170]},{9:$Vd,20:$Ve,46:171,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:$Vd,20:$Ve,46:172,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:[1,175],19:174,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,66:173},{9:$Vd,20:$Ve,46:176,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:$VC,15:$VD,17:108,19:119,23:177,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM},o($VS,[2,41]),o($VS,[2,42]),{10:[1,178],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},o($VS,[2,44]),{15:[1,179]},o($V9,[2,19]),o($V9,[2,20]),{22:[2,102]},o($V9,[2,16]),{10:[1,180],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{10:[1,181]},{22:[1,182]},{51:[1,183]},{22:[1,184],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{22:[1,185],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{10:[1,186]},{9:[1,187]},{48:[1,188]},{22:[1,189],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{15:[1,190]},o($VS,[2,43]),o($V9,[2,18]),o($VS,[2,49]),o($VS,[2,50]),{10:[1,191]},{53:192,54:[1,193],55:[1,194]},{13:[1,195]},{13:[1,196]},{9:$Vd,20:$Ve,46:197,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{48:[1,198]},{9:$Vd,20:$Ve,46:199,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{13:[1,200]},{70:[1,201]},o($VS,[2,51]),{10:[1,202]},{20:[1,203]},{20:[1,204]},{9:$VC,15:$VD,17:108,19:119,23:205,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM},{15:[1,208],59:206,60:207,61:209,62:$VT,64:$VU},{10:[1,212],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{9:$Vd,20:$Ve,46:213,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{10:[2,70],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{9:$VC,15:$VD,17:108,19:119,23:214,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM},{20:[1,215]},o($VS,[2,52]),{9:$Vd,20:$Ve,22:[1,217],46:216,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:$Vd,20:$Ve,22:[1,219],46:218,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{15:[1,220]},{15:[1,222],60:221,64:$VU},{15:[1,223]},o($VS,[2,63]),o($VV,[2,65],{61:209,59:224,62:$VT}),{63:[1,225]},{9:$Vd,20:$Ve,46:226,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{9:$Vd,20:$Ve,46:228,67:227,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{10:[2,69],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{15:[1,229]},{9:$Vd,20:$Ve,46:230,72:$Vf,73:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm},{22:[1,231],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{10:[2,54]},{22:[1,232],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{10:[2,56]},o($VS,[2,57],{57:[1,233]}),{15:[1,234]},o($VS,[2,61]),o($VS,[2,62]),o($VV,[2,64]),{9:$VC,15:$VD,17:108,19:119,23:235,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM},{63:[1,236],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{22:[1,237]},{22:[2,73],68:[1,238],69:[1,239],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},o($VS,[2,74]),{22:[1,240],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{10:[2,53]},{10:[2,55]},{13:[1,241],35:242,56:$VI},o($VS,[2,60]),{15:[2,67]},o($VR,$VD,{17:108,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,19:119,23:243,9:$VC,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM}),{13:[1,244]},{22:[2,71]},{22:[2,72]},{10:[1,245]},{9:$VC,15:$VD,17:108,19:119,23:246,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM},o($VS,[2,59]),o($VR,[2,66]),{9:$VC,15:$VD,17:108,19:119,23:247,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,33:109,34:110,35:111,36:112,37:113,38:114,39:115,40:116,41:117,42:118,43:$VE,44:$VF,45:$VG,50:$VH,56:$VI,58:$VJ,65:$VK,70:$VL,71:$VM},o($VS,[2,75]),{15:[1,248]},{15:[1,249]},o($VS,[2,58]),o($VS,[2,68])],
defaultActions: {4:[2,4],10:[2,2],11:[2,3],13:[2,8],16:[2,1],26:[2,21],27:[2,22],28:[2,23],29:[2,24],30:[2,25],32:[2,12],130:[2,26],165:[2,102],217:[2,54],219:[2,56],231:[2,53],232:[2,55],235:[2,67],238:[2,71],239:[2,72]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const OPERATION_TYPE            = require("./Instructions/instruction").OPERATIONS;
    const TYPES                     = require("./Instructions/instruction").TYPES;
    const APIinstructions           = require("./Instructions/instruction").APIinstructions;
    const LexicalErrors             = new Array();
    const SintacticalErrors         = new Array();
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return
break;
case 2:return
break;
case 3:return 87
break;
case 4:return 88
break;
case 5:return 89
break;
case 6:return 90
break;
case 7:return 91
break;
case 8:return 92
break;
case 9:return 68
break;
case 10:return 69
break;
case 11:return 78
break;
case 12:return 75
break;
case 13:return 76
break;
case 14:return 77
break;
case 15:return 74
break;
case 16:return 72
break;
case 17:return 82
break;
case 18:return 81
break;
case 19:return 83
break;
case 20:return 84
break;
case 21:return 80
break;
case 22:return 79
break;
case 23:return 85
break;
case 24:return 86
break;
case 25:return 73
break;
case 26:return 48
break;
case 27:return 10
break;
case 28:return 63
break;
case 29:return 13
break;
case 30:return 15
break;
case 31:return 20
break;
case 32:return 22
break;
case 33:return 32
break;
case 34:return 26
break;
case 35:return 27
break;
case 36:return 30
break;
case 37:return 28
break;
case 38:return 29
break;
case 39:return 12
break;
case 40:return 8
break;
case 41:return 56
break;
case 42:return 57
break;
case 43:return 58
break;
case 44:return 62
break;
case 45:return 64
break;
case 46:return 44
break;
case 47:return 70
break;
case 48:return 71
break;
case 49:return 65
break;
case 50:return 43
break;
case 51:return 45
break;
case 52:return 24
break;
case 53:return 25
break;
case 54:return 50
break;
case 55:return 51
break;
case 56:return 52
break;
case 57:return 54
break;
case 58:return 55
break;
case 59:return 9
break;
case 60:return 6
break;
case 61: LexicalErrors.push({ ERROR: yy_.yytext, LINE: yy_.yylloc.first_line, COLUMN : yy_.yylloc.first_column }); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:([0-9]+))/,/^(?:(([0-9]+)(\.([0-9]+))?))/,/^(?:(("[^\"]*")))/,/^(?:(('[^\']*')))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\+)/,/^(?:-)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:;)/,/^(?::)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:System\b)/,/^(?:\.)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}