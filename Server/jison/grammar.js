/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,5],$V2=[1,9],$V3=[1,10],$V4=[6,15],$V5=[2,8,9,10,23,33],$V6=[1,38],$V7=[1,39],$V8=[1,40],$V9=[1,41],$Va=[1,42],$Vb=[1,43],$Vc=[6,12,15],$Vd=[2,10,25,27,28,29,30,31],$Ve=[8,33,49],$Vf=[2,59],$Vg=[2,10,13,25,27,28,29,30,31,44,45,46,51,57,59,63,65,66,71,72],$Vh=[1,71],$Vi=[1,70],$Vj=[1,68],$Vk=[1,69],$Vl=[1,72],$Vm=[1,73],$Vn=[1,74],$Vo=[1,75],$Vp=[1,76],$Vq=[1,77],$Vr=[1,89],$Vs=[1,88],$Vt=[1,90],$Vu=[1,91],$Vv=[1,92],$Vw=[1,93],$Vx=[1,94],$Vy=[1,95],$Vz=[1,96],$VA=[1,97],$VB=[1,98],$VC=[1,99],$VD=[1,100],$VE=[1,101],$VF=[8,23,33,64,69,70,73,75,76,77,78,79,80,81,82,83,84,85,86,87],$VG=[2,49],$VH=[1,147],$VI=[1,154],$VJ=[1,155],$VK=[1,156],$VL=[1,148],$VM=[1,149],$VN=[1,150],$VO=[1,151],$VP=[1,152],$VQ=[1,153],$VR=[8,23,33,64,69,70,73,75,80,81,82,83,84,85,86,87],$VS=[8,23,33,64,69,70,73,75,76,77,78,80,81,82,83,84,85,86,87],$VT=[8,23,33,64,69,70,80,81,82,83,84,85,86,87],$VU=[8,23,33,64,69,70,84,85,86,87],$VV=[10,63,65],$VW=[2,10,13,27,28,29,30,31,44,45,46,51,57,59,63,65,66,71,72],$VX=[1,245],$VY=[1,244],$VZ=[10,65];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"IMPORTLIST":4,"CLASSLIST":5,"EOF":6,"ERRORSENTENCE":7,"SEMICOLON":8,"S_OPEN_KEY":9,"S_CLOSE_KEY":10,"FINALIMPORT":11,"import":12,"id":13,"FINALCLASS":14,"class":15,"INSIDECLASS":16,"FINALINSIDECLASS":17,"DECLARATIONSENTENCE":18,"METHODSFUN":19,"TYPE":20,"S_OPEN_PARENTHESIS":21,"PARAMETERDECLARATION":22,"S_CLOSE_PARENTHESIS":23,"SENTENCESLIST":24,"void":25,"main":26,"WR_INT":27,"WR_DOUBLE":28,"WR_CHAR":29,"WR_STRING":30,"WR_BOOLEAN":31,"PARAMETER":32,"S_COMMA":33,"ASSIGNMENTORCALLSENTENCE":34,"PRINTSENTENCE":35,"IFELSESENTENCE":36,"SWITCHSENTENCE":37,"FORSENTENCE":38,"WHILESENTENCE":39,"DOWHILESENTENCE":40,"CONTINUESENTENCE":41,"BREAKSENTENCE":42,"RETURNSENTENCE":43,"continue":44,"break":45,"return":46,"EXPRESSION":47,"IDLIST":48,"S_EQUALS":49,"EXPRESSIONLIST":50,"System":51,"S_POINT":52,"out":53,"PRINTOPT":54,"print":55,"println":56,"if":57,"else":58,"switch":59,"CASELIST":60,"OPTDEFAULT":61,"CASEFINAL":62,"case":63,"S_TWOPOINTS":64,"default":65,"for":66,"ASSIGNMENTFOR":67,"INCDEC":68,"S_PLUSPLUS":69,"S_MINUSMINUS":70,"while":71,"do":72,"S_MINUS":73,"S_NOT":74,"S_PLUS":75,"S_MULTIPLY":76,"S_DIVISION":77,"S_MODULE":78,"S_POTENCY":79,"S_MAJOR":80,"S_MINOR":81,"S_MAJOREQUALS":82,"S_MINOREQUALS":83,"S_EQUALSEQUALS":84,"S_DIFFERENT":85,"S_OR":86,"S_AND":87,"Double_Number":88,"Integer_Number":89,"String_Literal":90,"Char_Literal":91,"true":92,"false":93,"FINALERROR":94,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"SEMICOLON",9:"S_OPEN_KEY",10:"S_CLOSE_KEY",12:"import",13:"id",15:"class",21:"S_OPEN_PARENTHESIS",23:"S_CLOSE_PARENTHESIS",25:"void",26:"main",27:"WR_INT",28:"WR_DOUBLE",29:"WR_CHAR",30:"WR_STRING",31:"WR_BOOLEAN",33:"S_COMMA",44:"continue",45:"break",46:"return",49:"S_EQUALS",51:"System",52:"S_POINT",53:"out",55:"print",56:"println",57:"if",58:"else",59:"switch",63:"case",64:"S_TWOPOINTS",65:"default",66:"for",69:"S_PLUSPLUS",70:"S_MINUSMINUS",71:"while",72:"do",73:"S_MINUS",74:"S_NOT",75:"S_PLUS",76:"S_MULTIPLY",77:"S_DIVISION",78:"S_MODULE",79:"S_POTENCY",80:"S_MAJOR",81:"S_MINOR",82:"S_MAJOREQUALS",83:"S_MINOREQUALS",84:"S_EQUALSEQUALS",85:"S_DIFFERENT",86:"S_OR",87:"S_AND",88:"Double_Number",89:"Integer_Number",90:"String_Literal",91:"Char_Literal",92:"true",93:"false"},
productions_: [0,[3,3],[3,2],[3,2],[3,3],[3,5],[3,1],[4,2],[4,1],[11,3],[11,3],[5,2],[5,1],[14,5],[14,4],[14,5],[14,4],[16,2],[16,1],[17,1],[17,1],[17,2],[17,4],[19,8],[19,7],[19,8],[19,7],[19,7],[20,1],[20,1],[20,1],[20,1],[20,1],[22,3],[22,1],[22,3],[22,1],[32,2],[24,2],[24,2],[24,2],[24,2],[24,2],[24,2],[24,2],[24,2],[24,2],[24,2],[24,2],[24,0],[24,3],[24,5],[41,2],[42,2],[43,3],[43,2],[18,3],[18,5],[48,3],[48,1],[34,4],[34,4],[34,5],[35,6],[54,4],[54,3],[54,4],[54,3],[36,7],[36,11],[36,9],[37,8],[37,7],[37,7],[37,6],[60,2],[60,1],[62,4],[61,3],[38,11],[67,4],[67,3],[68,2],[68,2],[68,1],[39,7],[40,9],[47,2],[47,2],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,4],[47,3],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[50,3],[50,1],[7,2],[7,1],[94,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return { AST: APIinstructions.root($$[$0-2], $$[$0-1]), LEXICAL_ERRORS: LexicalErrors, SINTACTICAL_ERRORS: SyntacticalErrors}; 
break;
case 2:
 return { AST: APIinstructions.root($$[$0-1], undefined), LEXICAL_ERRORS: LexicalErrors, SINTACTICAL_ERRORS: SyntacticalErrors}; 
break;
case 3:
 return { AST: APIinstructions.root(undefined, $$[$0-1]), LEXICAL_ERRORS: LexicalErrors, SINTACTICAL_ERRORS: SyntacticalErrors}; 
break;
case 4:

            ARRAYMANAGEMENT.pushAr( SyntacticalErrors,
                {
                    ERROR: "Se esperaba import o clase, se encontro '" + $$[$0-2] + "'", 
                    LINE: this._$.first_line, 
                    COLUMN: this._$.first_column 
                }
            );            
        
break;
case 5:

            ARRAYMANAGEMENT.pushAr( SyntacticalErrors,
                {
                    ERROR: "Se esperaba import o clase, se encontro '" + $$[$0-4] + "'", 
                    LINE: this._$.first_line, 
                    COLUMN: this._$.first_column 
                }
            );            
        
break;
case 6:
 return { AST: 'Vacio', LEXICAL_ERRORS: LexicalErrors, SINTACTICAL_ERRORS: SyntacticalErrors }; 
break;
case 7:
 this.$ = APIinstructions.newImportList($$[$0], $$[$0-1]); 
break;
case 8:
 this.$ = APIinstructions.newImportList(undefined, $$[$0]); 
break;
case 9:
 this.$ = APIinstructions.newImport($$[$0-1]); 
break;
case 10:
 
                ARRAYMANAGEMENT.pushAr( SyntacticalErrors,
                    { 
                        ERROR: "Se esperaba ID1, se encontro '" + $$[$0-1] + "'", 
                        LINE: this._$.first_line, 
                        COLUMN: this._$.first_column 
                    }
                );
                this.$ = undefined;
            
break;
case 11:
 this.$ = APIinstructions.newClassList($$[$0], $$[$0-1]); 
break;
case 12:
 this.$ = APIinstructions.newClassList(undefined, $$[$0]); 
break;
case 13:
 this.$ = APIinstructions.newClass($$[$0-3], $$[$0-1]); 
break;
case 14:
 this.$ = APIinstructions.newClass($$[$0-2], undefined); 
break;
case 15:
 
                ARRAYMANAGEMENT.pushAr( SyntacticalErrors,
                    {
                        ERROR: "Se esperaba ID, se encontro '" + $$[$0-3] + "'",
                        LINE: this._$.first_line,
                        COLUMN: this._$.first_column
                    }
                );
                this.$ = undefined;
             
break;
case 16:

                ARRAYMANAGEMENT.pushAr( SyntacticalErrors,
                    {
                        ERROR: "Se esperaba ID, se encontro nada",
                        LINE: this._$.first_line,
                        COLUMN: this._$.first_column
                    }
                );
                this.$ = undefined;
            
break;
case 17:
 this.$ = APIinstructions.newListInsideClass($$[$0], $$[$0-1]); 
break;
case 18:
 this.$ = APIinstructions.newListInsideClass(undefined, $$[$0]); 
break;
case 19: case 20: case 28: case 29: case 30: case 31: case 32: case 116:
 this.$ = $$[$0]; 
break;
case 21:

                        ARRAYMANAGEMENT.pushAr( SyntacticalErrors,
                            {
                                ERROR: "Se esperaba declaracion o metodo, se encontro '" + $$[$0-1] + "'",
                                LINE: this._$.first_line,
                                COLUMN: this._$.first_column
                            }
                        );
                        this.$ = undefined;
                    
break;
case 22:

                        ARRAYMANAGEMENT.pushAr( SyntacticalErrors,
                            {
                                ERROR: "Se esperaba declaracion o metodo, se encontro '" + $$[$0-3] + "'",
                                LINE: this._$.first_line,
                                COLUMN: this._$.first_column
                            }
                        );
                        this.$ = undefined;
                    
break;
case 23:
 this.$ = APIinstructions.newFunction($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 24:
 this.$ = APIinstructions.newFunction($$[$0-6], $$[$0-5], undefined, $$[$0-1]) 
break;
case 25:
 this.$ = APIinstructions.newMethod($$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 26: case 27:
 this.$ = APIinstructions.newMethod($$[$0-5], undefined, $$[$0-1]); 
break;
case 33:
 this.$ = APIinstructions.newParamsList($$[$0], $$[$0-2]); 
break;
case 34:
 this.$ = APIinstructions.newParamsList(undefined, $$[$0]); 
break;
case 35:

                            ARRAYMANAGEMENT.pushAr( SyntacticalErrors,
                                {
                                    ERROR: "Se esperaba parametro, se encontro: '" + $$[$0-2] + "'",
                                    LINE: this._$.first_line,
                                    COLUMN: this._$.first_column
                                }
                            );
                            this.$ = undefined;
                        
break;
case 36:

                            ARRAYMANAGEMENT.pushAr( SyntacticalErrors,
                                {
                                    ERROR: "Se esperaba parametros, se encontro: '" + $$[$0] + "'",
                                    LINE: this._$.first_line,
                                    COLUMN: this._$.first_column
                                }
                            );
                            this.$ = undefined;
                        
break;
case 37:
 this.$ = APIinstructions.newParam($$[$0-1], $$[$0]); 
break;
case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48:
 this.$ = APIinstructions.newSententenceList($$[$0], $$[$0-1]); 
break;
case 49:
 this.$ = undefined; 
break;
case 50:

                    ARRAYMANAGEMENT.pushAr( SyntacticalErrors,
                        {
                            ERROR: "Se esperaba sentencia, se encontro '" + $$[$0-2] + "'",
                            LINE: this._$.first_line,
                            COLUMN: this._$.first_column
                        }
                    );
                    this.$ = undefined;
                
break;
case 51:

                    ARRAYMANAGEMENT.pushAr( SyntacticalErrors,
                        {
                            ERROR: "Se esperaba sentencia, se encontro '" + $$[$0-4] + "'",
                            LINE: this._$.first_line,
                            COLUMN: this._$.first_column
                        }
                    )
                
break;
case 52:
 this.$ = APIinstructions.newContinue(); 
break;
case 53:
 this.$ = APIinstructions.newBreak(); 
break;
case 54:
 this.$ = APIinstructions.newReturn($$[$0-1]); 
break;
case 55:
 this.$ = APIinstructions.newReturn(undefined); 
break;
case 56:
 this.$ = APIinstructions.newDeclaration($$[$0-2], $$[$0-1]); 
break;
case 57:
 this.$ = APIinstructions.newDecAs($$[$0-4], $$[$0-3], $$[$0-1]); 
break;
case 58:
 this.$ = APIinstructions.newListIDs($$[$0-2], $$[$0]); 
break;
case 59:
 this.$ = APIinstructions.newListIDs(undefined, $$[$0]); 
break;
case 60:
 this.$ = APIinstructions.newAssignation($$[$0-3], $$[$0-1]); 
break;
case 61:
 this.$ = APIinstructions.newCallFun($$[$0-3], undefined); 
break;
case 62:
 this.$ = APIinstructions.newCallFun($$[$0-4], $$[$0-2]); 
break;
case 63: case 103:
 this.$ = $$[$0-1]; 
break;
case 64:
 this.$ = APIinstructions.newPrint("System.out.print", $$[$0-1]); 
break;
case 65:
 this.$ = APIinstructions.newPrint("System.out.print", undefined); 
break;
case 66:
 this.$ = APIinstructions.newPrint("System.out.println", $$[$0-1]); 
break;
case 67:
 this.$ = APIinstructions.newPrint("System.out.println", undefined); 
break;
case 68:
 this.$ = APIinstructions.newIf($$[$0-4], $$[$0-1], undefined, undefined); 
break;
case 69:
 this.$ = APIinstructions.newIf($$[$0-8], $$[$0-5], undefined, APIinstructions.newElse($$[$0-1])); 
break;
case 70:
 this.$ = APIinstructions.newIf($$[$0-6], $$[$0-3], APIinstructions.newElseIf($$[$0]), undefined); 
break;
case 71:
 this.$ = APIinstructions.newSwitch($$[$0-5], $$[$0-2], $$[$0-1]); 
break;
case 72:
 this.$ = APIinstructions.newSwitch($$[$0-4], $$[$0-1], undefined); 
break;
case 73:
 this.$ = APIinstructions.newSwitch($$[$0-4], undefined, $$[$0-1]); 
break;
case 74:
 this.$ = APIinstructions.newSwitch($$[$0-3], undefined, undefined); 
break;
case 75:
 this.$ = APIinstructions.newListCases($$[$0], $$[$0-1]); 
break;
case 76:
 this.$ = APIinstructions.newListCases(undefined, $$[$0]); 
break;
case 77:
 this.$ = APIinstructions.newCase($$[$0-2], $$[$0]); 
break;
case 78:
 this.$ = APIinstructions.newDefault($$[$0]); 
break;
case 79:
 this.$ = APIinstructions.newFor($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 80:
 this.$ = APIinstructions.newDeclarationFor($$[$0-3], $$[$0-2], $$[$0]); 
break;
case 81:
 this.$ = APIinstructions.newDeclarationFor(undefined, $$[$0-2], $$[$0]); 
break;
case 82: case 83:
 this.$ = APIinstructions.newNextFor($$[$0-1], $$[$0]); 
break;
case 84:
 this.$ = APIinstructions.newNextFor($$[$0], undefined); 
break;
case 85:
 this.$ = APIinstructions.newWhile($$[$0-4], $$[$0-1]); 
break;
case 86:
 this.$ = APIinstructions.newDoWhile($$[$0-2], $$[$0-6]); 
break;
case 87:
 this.$ = APIinstructions.newUnaryOP($$[$0], OPERATION_TYPE.NEGATE); 
break;
case 88:
 this.$ = APIinstructions.newUnaryOP($$[$0], OPERATION_TYPE.NOT); 
break;
case 89:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.ADDITION) 
break;
case 90:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.SUBTRACTION) 
break;
case 91:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.MULTIPLICATION) 
break;
case 92:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.DIVISION) 
break;
case 93:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.MODULE) 
break;
case 94:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.POTENCY) 
break;
case 95:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.MAJOR_THAN) 
break;
case 96:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.LESS_THAN) 
break;
case 97:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.MAJOR_EQUALS_THAN) 
break;
case 98:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.LESS_EQUALS_THAN) 
break;
case 99:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.EQUALS_EQUALS) 
break;
case 100:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.DIFFERENT) 
break;
case 101:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.OR) 
break;
case 102:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.AND) 
break;
case 104:
 this.$ = APIinstructions.newCallFun($$[$0-3], $$[$0-1]); 
break;
case 105:
 this.$ = APIinstructions.newCallFun($$[$0-2], undefined); 
break;
case 106:
 this.$ = APIinstructions.newValue($$[$0], TYPES.ID); 
break;
case 107:
 this.$ = APIinstructions.newValue($$[$0], TYPES.DOUBLE); 
break;
case 108:
 this.$ = APIinstructions.newValue($$[$0], TYPES.INTEGER); 
break;
case 109:
 this.$ = APIinstructions.newValue($$[$0], TYPES.STRING); 
break;
case 110:
 this.$ = APIinstructions.newValue($$[$0], TYPES.CHAR); 
break;
case 111: case 112:
 this.$ = APIinstructions.newValue($$[$0], TYPES.BOOLEAN); 
break;
case 113:
 this.$ = APIinstructions.newListExpression($$[$0], $$[$0-2]); 
break;
case 114:
 this.$ = APIinstructions.newListExpression(undefined, $$[$0]); 
break;
case 115:
 this.$ = $$[$0-1] + " " + $$[$0]; 
break;
}
},
table: [{2:$V0,3:1,4:2,5:3,6:$V1,7:4,11:6,12:$V2,14:7,15:$V3,94:8},{1:[3]},{5:12,6:[1,13],14:7,15:$V3},{6:[1,14]},{2:$V0,8:[1,15],9:[1,16],94:17},{1:[2,6]},o($V4,[2,8],{11:6,4:18,12:$V2}),{5:19,6:[2,12],14:7,15:$V3},o($V5,[2,116]),{2:$V0,7:21,13:[1,20],94:8},{2:$V0,7:23,9:[1,24],13:[1,22],94:8},o($V5,[2,117]),{6:[1,25]},{1:[2,2]},{1:[2,3]},{2:$V0,3:26,4:2,5:3,6:$V1,7:4,11:6,12:$V2,14:7,15:$V3,94:8},{2:$V0,7:27,94:8},o($V5,[2,115]),o($V4,[2,7]),{6:[2,11]},{8:[1,28]},{2:$V0,8:[1,29],94:17},{9:[1,30]},{2:$V0,9:[1,31],94:17},{2:$V0,7:36,16:32,17:33,18:34,19:35,20:37,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,94:8},{1:[2,1]},{1:[2,4]},{2:$V0,10:[1,44],94:17},o($Vc,[2,9]),o($Vc,[2,10]),{2:$V0,7:36,10:[1,46],16:45,17:33,18:34,19:35,20:37,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,94:8},{2:$V0,7:36,16:47,17:33,18:34,19:35,20:37,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,94:8},{10:[1,48]},{2:$V0,7:36,10:[2,18],16:49,17:33,18:34,19:35,20:37,25:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,94:8},o($Vd,[2,19]),o($Vd,[2,20]),{2:$V0,8:[1,50],9:[1,51],94:17},{13:[1,53],48:52},{13:[1,54],26:[1,55]},{13:[2,28]},{13:[2,29]},{13:[2,30]},{13:[2,31]},{13:[2,32]},{2:$V0,3:56,4:2,5:3,6:$V1,7:4,11:6,12:$V2,14:7,15:$V3,94:8},{10:[1,57]},o($V4,[2,14]),{10:[1,58]},o($V4,[2,16]),{10:[2,17]},o($Vd,[2,21]),{2:$V0,7:59,94:8},{8:[1,60],33:[1,62],49:[1,61]},o($Ve,$Vf,{21:[1,63]}),{21:[1,64]},{21:[1,65]},{1:[2,5]},o($V4,[2,13]),o($V4,[2,15]),{2:$V0,10:[1,66],94:17},o($Vg,[2,56]),{13:$Vh,21:$Vi,47:67,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{13:[1,78]},{2:$V0,7:82,20:83,22:79,23:[1,80],27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,32:81,94:8},{2:$V0,7:82,20:83,22:84,23:[1,85],27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,32:81,94:8},{23:[1,86]},o($Vd,[2,22]),{8:[1,87],73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE},{13:$Vh,21:$Vi,47:102,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{13:$Vh,21:$Vi,47:103,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{13:$Vh,21:$Vi,47:104,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},o($VF,[2,106],{21:[1,105]}),o($VF,[2,107]),o($VF,[2,108]),o($VF,[2,109]),o($VF,[2,110]),o($VF,[2,111]),o($VF,[2,112]),o($Ve,[2,58]),{23:[1,106]},{9:[1,107]},{23:[2,34],33:[1,108]},{2:$V0,23:[2,36],33:[1,109],94:17},{13:[1,110]},{23:[1,111]},{9:[1,112]},{9:[1,113]},o($Vg,[2,57]),{13:$Vh,21:$Vi,47:114,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{13:$Vh,21:$Vi,47:115,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{13:$Vh,21:$Vi,47:116,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{13:$Vh,21:$Vi,47:117,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{13:$Vh,21:$Vi,47:118,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{13:$Vh,21:$Vi,47:119,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{13:$Vh,21:$Vi,47:120,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{13:$Vh,21:$Vi,47:121,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{13:$Vh,21:$Vi,47:122,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{13:$Vh,21:$Vi,47:123,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{13:$Vh,21:$Vi,47:124,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{13:$Vh,21:$Vi,47:125,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{13:$Vh,21:$Vi,47:126,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{13:$Vh,21:$Vi,47:127,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},o($VF,[2,87]),o($VF,[2,88]),{23:[1,128],73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE},{13:$Vh,21:$Vi,23:[1,130],47:131,50:129,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{9:[1,132]},{2:$V0,7:145,10:$VG,13:$VH,18:134,20:146,24:133,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ,94:8},{2:$V0,7:82,20:83,22:157,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,32:81,94:8},{2:$V0,7:82,20:83,22:158,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,32:81,94:8},o([23,33],[2,37]),{9:[1,159]},{2:$V0,7:145,10:$VG,13:$VH,18:134,20:146,24:160,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ,94:8},{2:$V0,7:145,10:$VG,13:$VH,18:134,20:146,24:161,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ,94:8},o($VR,[2,89],{76:$Vt,77:$Vu,78:$Vv,79:$Vw}),o($VR,[2,90],{76:$Vt,77:$Vu,78:$Vv,79:$Vw}),o($VS,[2,91],{79:$Vw}),o($VS,[2,92],{79:$Vw}),o($VS,[2,93],{79:$Vw}),o($VF,[2,94]),o($VT,[2,95],{73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw}),o($VT,[2,96],{73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw}),o($VT,[2,97],{73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw}),o($VT,[2,98],{73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw}),o($VU,[2,99],{73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA}),o($VU,[2,100],{73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA}),o([8,23,33,64,69,70,86],[2,101],{73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,87:$VE}),o([8,23,33,64,69,70,86,87],[2,102],{73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC}),o($VF,[2,103]),{23:[1,162]},o($VF,[2,105]),{23:[2,114],33:[1,163],73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE},{2:$V0,7:145,10:$VG,13:$VH,18:134,20:146,24:164,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ,94:8},{10:[1,165]},o($VV,$VG,{94:8,18:134,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,7:145,20:146,24:166,2:$V0,13:$VH,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ}),o($VV,$VG,{94:8,18:134,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,7:145,20:146,24:167,2:$V0,13:$VH,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ}),o($VV,$VG,{94:8,18:134,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,7:145,20:146,24:168,2:$V0,13:$VH,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ}),o($VV,$VG,{94:8,18:134,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,7:145,20:146,24:169,2:$V0,13:$VH,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ}),o($VV,$VG,{94:8,18:134,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,7:145,20:146,24:170,2:$V0,13:$VH,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ}),o($VV,$VG,{94:8,18:134,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,7:145,20:146,24:171,2:$V0,13:$VH,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ}),o($VV,$VG,{94:8,18:134,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,7:145,20:146,24:172,2:$V0,13:$VH,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ}),o($VV,$VG,{94:8,18:134,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,7:145,20:146,24:173,2:$V0,13:$VH,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ}),o($VV,$VG,{94:8,18:134,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,7:145,20:146,24:174,2:$V0,13:$VH,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ}),o($VV,$VG,{94:8,18:134,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,7:145,20:146,24:175,2:$V0,13:$VH,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ}),o($VV,$VG,{94:8,18:134,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,7:145,20:146,24:176,2:$V0,13:$VH,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ}),{2:$V0,8:[1,177],9:[1,178],94:17},{13:[1,179],48:52},{21:[1,181],49:[1,180]},{52:[1,182]},{21:[1,183]},{21:[1,184]},{21:[1,185]},{21:[1,186]},{9:[1,187]},{8:[1,188]},{8:[1,189]},{8:[1,191],13:$Vh,21:$Vi,47:190,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{23:[2,33]},{23:[2,35]},{2:$V0,7:145,10:$VG,13:$VH,18:134,20:146,24:192,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ,94:8},{10:[1,193]},{10:[1,194]},o($VF,[2,104]),{13:$Vh,21:$Vi,47:131,50:195,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{10:[1,196]},o($Vd,[2,24]),o($VV,[2,38]),o($VV,[2,39]),o($VV,[2,40]),o($VV,[2,41]),o($VV,[2,42]),o($VV,[2,43]),o($VV,[2,44]),o($VV,[2,45]),o($VV,[2,46]),o($VV,[2,47]),o($VV,[2,48]),o($VV,$VG,{94:8,18:134,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,7:145,20:146,24:197,2:$V0,13:$VH,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ}),{2:$V0,7:145,10:$VG,13:$VH,18:134,20:146,24:198,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ,94:8},o($Ve,$Vf),{13:$Vh,21:$Vi,47:199,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{13:$Vh,21:$Vi,23:[1,200],47:131,50:201,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{53:[1,202]},{13:$Vh,21:$Vi,47:203,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{13:$Vh,21:$Vi,47:204,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{13:[1,207],20:206,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,67:205},{13:$Vh,21:$Vi,47:208,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{2:$V0,7:145,10:$VG,13:$VH,18:134,20:146,24:209,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ,94:8},o($VW,[2,52]),o($VW,[2,53]),{8:[1,210],73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE},o($VW,[2,55]),{10:[1,211]},o($Vd,[2,26]),o($Vd,[2,27]),{23:[2,113]},o($Vd,[2,23]),o($VV,[2,50]),{10:[1,212]},{8:[1,213],73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE},{8:[1,214]},{23:[1,215]},{52:[1,216]},{23:[1,217],73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE},{23:[1,218],73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE},{8:[1,219]},{13:[1,220]},{49:[1,221]},{23:[1,222],73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE},{10:[1,223]},o($VW,[2,54]),o($Vd,[2,25]),o($VV,$VG,{94:8,18:134,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,7:145,20:146,24:224,2:$V0,13:$VH,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ}),o($VW,[2,60]),o($VW,[2,61]),{8:[1,225]},{54:226,55:[1,227],56:[1,228]},{9:[1,229]},{9:[1,230]},{13:$Vh,21:$Vi,47:231,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{49:[1,232]},{13:$Vh,21:$Vi,47:233,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{9:[1,234]},{71:[1,235]},o($VV,[2,51]),o($VW,[2,62]),{8:[1,236]},{21:[1,237]},{21:[1,238]},{2:$V0,7:145,10:$VG,13:$VH,18:134,20:146,24:239,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ,94:8},{10:[1,242],60:240,61:241,62:243,63:$VX,65:$VY},{8:[1,246],73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE},{13:$Vh,21:$Vi,47:247,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{8:[2,81],73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE},{2:$V0,7:145,10:$VG,13:$VH,18:134,20:146,24:248,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ,94:8},{21:[1,249]},o($VW,[2,63]),{13:$Vh,21:$Vi,23:[1,251],47:250,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{13:$Vh,21:$Vi,23:[1,253],47:252,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{10:[1,254]},{10:[1,256],61:255,65:$VY},{10:[1,257]},o($VW,[2,74]),o($VZ,[2,76],{62:243,60:258,63:$VX}),{64:[1,259]},{13:$Vh,21:$Vi,47:260,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{13:$Vh,21:$Vi,47:262,68:261,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{8:[2,80],73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE},{10:[1,263]},{13:$Vh,21:$Vi,47:264,73:$Vj,74:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{23:[1,265],73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE},{8:[2,65]},{23:[1,266],73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE},{8:[2,67]},o($VW,[2,68],{58:[1,267]}),{10:[1,268]},o($VW,[2,72]),o($VW,[2,73]),o($VZ,[2,75]),{2:$V0,7:145,10:$VG,13:$VH,18:134,20:146,24:269,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ,94:8},{64:[1,270],73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE},{23:[1,271]},{23:[2,84],69:[1,272],70:[1,273],73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE},o($VW,[2,85]),{23:[1,274],73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE},{8:[2,64]},{8:[2,66]},{9:[1,275],36:276,57:$VM},o($VW,[2,71]),{10:[2,78]},o($VV,$VG,{94:8,18:134,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,7:145,20:146,24:277,2:$V0,13:$VH,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ}),{9:[1,278]},{23:[2,82]},{23:[2,83]},{8:[1,279]},{2:$V0,7:145,10:$VG,13:$VH,18:134,20:146,24:280,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ,94:8},o($VW,[2,70]),o($VV,[2,77]),{2:$V0,7:145,10:$VG,13:$VH,18:134,20:146,24:281,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,34:135,35:136,36:137,37:138,38:139,39:140,40:141,41:142,42:143,43:144,44:$VI,45:$VJ,46:$VK,51:$VL,57:$VM,59:$VN,66:$VO,71:$VP,72:$VQ,94:8},o($VW,[2,86]),{10:[1,282]},{10:[1,283]},o($VW,[2,69]),o($VW,[2,79])],
defaultActions: {5:[2,6],13:[2,2],14:[2,3],19:[2,11],25:[2,1],26:[2,4],39:[2,28],40:[2,29],41:[2,30],42:[2,31],43:[2,32],49:[2,17],56:[2,5],157:[2,33],158:[2,35],195:[2,113],251:[2,65],253:[2,67],265:[2,64],266:[2,66],269:[2,78],272:[2,82],273:[2,83]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const OPERATION_TYPE            = require("./Instructions/instruction").OPERATIONS;
    const TYPES                     = require("./Instructions/instruction").TYPES;
    const APIinstructions           = require("./Instructions/instruction").APIinstructions;

    const ARRAYMANAGEMENT             = require("./Instructions/instruction").ARRAYMANAGEMENT;

    ARRAYMANAGEMENT.DeleteArrays();

    let LexicalErrors             = ARRAYMANAGEMENT.getLex();
    let SyntacticalErrors         = ARRAYMANAGEMENT.getSyn();
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return
break;
case 2:return
break;
case 3:return 88
break;
case 4:return 89
break;
case 5:return 90
break;
case 6:return 91
break;
case 7:return 92
break;
case 8:return 93
break;
case 9:return 69
break;
case 10:return 70
break;
case 11:return 79
break;
case 12:return 76
break;
case 13:return 77
break;
case 14:return 78
break;
case 15:return 75
break;
case 16:return 73
break;
case 17:return 83
break;
case 18:return 82
break;
case 19:return 84
break;
case 20:return 85
break;
case 21:return 81
break;
case 22:return 80
break;
case 23:return 86
break;
case 24:return 87
break;
case 25:return 74
break;
case 26:return 49
break;
case 27:return 8
break;
case 28:return 64
break;
case 29:return 9
break;
case 30:return 10
break;
case 31:return 21
break;
case 32:return 23
break;
case 33:return 33
break;
case 34:return 27
break;
case 35:return 28
break;
case 36:return 31
break;
case 37:return 29
break;
case 38:return 30
break;
case 39:return 15
break;
case 40:return 12
break;
case 41:return 57
break;
case 42:return 58
break;
case 43:return 59
break;
case 44:return 63
break;
case 45:return 65
break;
case 46:return 45
break;
case 47:return 71
break;
case 48:return 72
break;
case 49:return 66
break;
case 50:return 44
break;
case 51:return 46
break;
case 52:return 25
break;
case 53:return 26
break;
case 54:return 51
break;
case 55:return 52
break;
case 56:return 53
break;
case 57:return 55
break;
case 58:return 56
break;
case 59:return 13
break;
case 60:return 6
break;
case 61: ARRAYMANAGEMENT.pushAr(LexicalErrors, { ERROR: "Caracter invalido no perteneciente al lenguaje: " + yy_.yytext, LINE: yy_.yylloc.first_line, COLUMN : yy_.yylloc.first_column }); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:(([0-9]+)(\.([0-9]+))?))/,/^(?:([0-9]+))/,/^(?:(("[^\"]*")))/,/^(?:(('[^\']*')))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\+)/,/^(?:-)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:;)/,/^(?::)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:System\b)/,/^(?:\.)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}