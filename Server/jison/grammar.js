/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[6,8,12],$V3=[6,12],$V4=[1,25],$V5=[1,26],$V6=[1,27],$V7=[1,28],$V8=[1,29],$V9=[1,30],$Va=[15,24,26,27,28,29,30],$Vb=[10,31,49],$Vc=[2,49],$Vd=[9,15,24,26,27,28,29,30,44,45,46,51,57,59,63,65,66,71,72],$Ve=[1,47],$Vf=[1,46],$Vg=[1,44],$Vh=[1,45],$Vi=[1,48],$Vj=[1,49],$Vk=[1,50],$Vl=[1,51],$Vm=[1,52],$Vn=[1,53],$Vo=[1,64],$Vp=[1,63],$Vq=[1,65],$Vr=[1,66],$Vs=[1,67],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,71],$Vx=[1,72],$Vy=[1,73],$Vz=[1,74],$VA=[1,75],$VB=[1,76],$VC=[10,22,31,64,69,70,73,75,76,77,78,79,80,81,82,83,84,85,86,87],$VD=[1,82],$VE=[22,31],$VF=[1,122],$VG=[1,129],$VH=[1,130],$VI=[1,131],$VJ=[1,123],$VK=[1,124],$VL=[1,125],$VM=[1,126],$VN=[1,127],$VO=[1,128],$VP=[10,22,31,64,69,70,73,75,80,81,82,83,84,85,86,87],$VQ=[10,22,31,64,69,70,73,75,76,77,78,80,81,82,83,84,85,86,87],$VR=[10,22,31,64,69,70,80,81,82,83,84,85,86,87],$VS=[10,22,31,64,69,70,84,85,86,87],$VT=[1,136],$VU=[9,15,26,27,28,29,30,44,45,46,51,57,59,63,65,66,71,72],$VV=[1,202],$VW=[1,201],$VX=[15,63,65];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"IMPORTLIST":4,"CLASSLIST":5,"EOF":6,"FINALIMPORT":7,"import":8,"id":9,"SEMICOLON":10,"FINALCLASS":11,"class":12,"S_OPEN_KEY":13,"INSIDECLASS":14,"S_CLOSE_KEY":15,"FINALINSIDECLASS":16,"DECLARATIONSENTENCE":17,"METHODSFUN":18,"TYPE":19,"S_OPEN_PARENTHESIS":20,"PARAMETERDECLARATION":21,"S_CLOSE_PARENTHESIS":22,"SENTENCESLIST":23,"void":24,"main":25,"WR_INT":26,"WR_DOUBLE":27,"WR_CHAR":28,"WR_STRING":29,"WR_BOOLEAN":30,"S_COMMA":31,"PARAMETER":32,"SENTENCE":33,"ASSIGNMENTORCALLSENTENCE":34,"PRINTSENTENCE":35,"IFELSESENTENCE":36,"SWITCHSENTENCE":37,"FORSENTENCE":38,"WHILESENTENCE":39,"DOWHILESENTENCE":40,"CONTINUESENTENCE":41,"BREAKSENTENCE":42,"RETURNSENTENCE":43,"continue":44,"break":45,"return":46,"EXPRESSION":47,"IDLIST":48,"S_EQUALS":49,"EXPRESISONLIST":50,"System":51,"S_POINT":52,"out":53,"PRINTOPT":54,"print":55,"println":56,"if":57,"else":58,"switch":59,"CASELIST":60,"OPTDEFAULT":61,"CASEFINAL":62,"case":63,"S_TWOPOINTS":64,"default":65,"for":66,"ASSIGNMENTFOR":67,"INCDEC":68,"S_PLUSPLUS":69,"S_MINUSMINUS":70,"while":71,"do":72,"S_MINUS":73,"S_NOT":74,"S_PLUS":75,"S_MULTIPLY":76,"S_DIVISION":77,"S_MODULE":78,"S_POTENCY":79,"S_MAJOR":80,"S_MINOR":81,"S_MAJOREQUALS":82,"S_MINOREQUALS":83,"S_EQUALSEQUALS":84,"S_DIFFERENT":85,"S_OR":86,"S_AND":87,"Integer_Number":88,"Double_Number":89,"String_Literal":90,"Char_Literal":91,"true":92,"false":93,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"import",9:"id",10:"SEMICOLON",12:"class",13:"S_OPEN_KEY",15:"S_CLOSE_KEY",20:"S_OPEN_PARENTHESIS",22:"S_CLOSE_PARENTHESIS",24:"void",25:"main",26:"WR_INT",27:"WR_DOUBLE",28:"WR_CHAR",29:"WR_STRING",30:"WR_BOOLEAN",31:"S_COMMA",44:"continue",45:"break",46:"return",49:"S_EQUALS",51:"System",52:"S_POINT",53:"out",55:"print",56:"println",57:"if",58:"else",59:"switch",63:"case",64:"S_TWOPOINTS",65:"default",66:"for",69:"S_PLUSPLUS",70:"S_MINUSMINUS",71:"while",72:"do",73:"S_MINUS",74:"S_NOT",75:"S_PLUS",76:"S_MULTIPLY",77:"S_DIVISION",78:"S_MODULE",79:"S_POTENCY",80:"S_MAJOR",81:"S_MINOR",82:"S_MAJOREQUALS",83:"S_MINOREQUALS",84:"S_EQUALSEQUALS",85:"S_DIFFERENT",86:"S_OR",87:"S_AND",88:"Integer_Number",89:"Double_Number",90:"String_Literal",91:"Char_Literal",92:"true",93:"false"},
productions_: [0,[3,3],[3,2],[3,2],[3,1],[4,2],[4,1],[7,3],[5,2],[5,1],[11,5],[11,4],[14,2],[14,1],[16,1],[16,1],[18,8],[18,7],[18,8],[18,7],[18,7],[19,1],[19,1],[19,1],[19,1],[19,1],[21,3],[21,1],[32,2],[23,2],[23,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[41,2],[42,2],[43,3],[43,2],[17,3],[17,5],[48,3],[48,1],[34,4],[34,4],[34,5],[35,6],[54,4],[54,3],[54,4],[54,3],[36,7],[36,11],[36,9],[37,8],[37,7],[37,7],[37,6],[60,2],[60,1],[62,4],[61,3],[38,11],[67,4],[67,3],[68,2],[68,2],[68,1],[39,7],[40,9],[47,2],[47,2],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,4],[47,3],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[50,3],[50,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return APIinstructions.root($$[$0-2], $$[$0-1]); 
break;
case 2:
 return APIinstructions.root($$[$0-1], undefined); 
break;
case 3:
 return APIinstructions.root(undefined, $$[$0-1]); 
break;
case 5:
 this.$ = APIinstructions.newImportList($$[$0-1], $$[$0]); 
break;
case 6:
 this.$ = APIinstructions.newImportList(undefined, $$[$0]); 
break;
case 7:
 this.$ = APIinstructions.newImport($$[$0-1]); 
break;
case 8:
 this.$ = APIinstructions.newClassList($$[$0-1], $$[$0]); 
break;
case 9:
 this.$ = APIinstructions.newClassList(undefined, $$[$0]); 
break;
case 10:
 this.$ = APIinstructions.newClass($$[$0-3], $$[$0-1]); 
break;
case 11:
 this.$ = APIinstructions.newClass($$[$0-2], undefined); 
break;
case 12:
 this.$ = APIinstructions.newListInsideClass($$[$0-1], $$[$0]); 
break;
case 13:
 this.$ = APIinstructions.newListInsideClass(undefined, $$[$0]); 
break;
case 14: case 15: case 21: case 22: case 23: case 24: case 25: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = APIinstructions.newFunction($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 17:
 this.$ = APIinstructions.newFunction($$[$0-6], $$[$0-5], undefined, $$[$0-1]) 
break;
case 18:
 this.$ = APIinstructions.newMethod($$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 19: case 20:
 this.$ = APIinstructions.newMethod($$[$0-5], undefined, $$[$0-1]); 
break;
case 26:
 this.$ = APIinstructions.newParamsList($$[$0-2], $$[$0]); 
break;
case 27:
 this.$ = APIinstructions.newParamsList(undefined, $$[$0]); 
break;
case 28:
 this.$ = APIinstructions.newParam($$[$0-1], $$[$0]); 
break;
case 29:
 this.$ = APIinstructions.newSentenceList($$[$0-1], $$[$0]); 
break;
case 30:
 this.$ = APIinstructions.newSentenceList(undefined, $$[$0]); 
break;
case 42:
 this.$ = APIinstructions.newContinue(); 
break;
case 43:
 this.$ = APIinstructions.newBreak(); 
break;
case 44:
 this.$ = APIinstructions.newReturn($$[$0-1]); 
break;
case 45:
 this.$ = APIinstructions.newReturn(undefined); 
break;
case 46:
 this.$ = APIinstructions.newDeclaration($$[$0-2], $$[$0-1]); 
break;
case 47:
 this.$ = APIinstructions.newDecAs($$[$0-4], $$[$0-3], $$[$0-1]); 
break;
case 48:
 this.$ = APIinstructions.newListIDs($$[$0-2], $$[$0]); 
break;
case 49:
 this.$ = APIinstructions.newListIDs(undefined, $$[$0]); 
break;
case 50:
 this.$ = APIinstructions.newAssignation($$[$0-3], $$[$0-1]); 
break;
case 51:
 this.$ = APIinstructions.newCallFun($$[$0-3], undefined); 
break;
case 52:
 this.$ = APIinstructions.newCallFun($$[$0-4], $$[$0-2]); 
break;
case 53: case 93:
 this.$ = $$[$0-1]; 
break;
case 54: case 56:
 this.$ = APIinstructions.newPrint($$[$0-1]); 
break;
case 55: case 57:
 this.$ = APIinstructions.newPrint(undefined); 
break;
case 58:
 this.$ = APIinstructions.newIf($$[$0-4], $$[$0-1], undefined, undefined); 
break;
case 59:
 this.$ = APIinstructions.newIf($$[$0-8], $$[$0-5], undefined, APIinstructions.newElse($$[$0-1])); 
break;
case 60:
 this.$ = APIinstructions.newIf($$[$0-6], $$[$0-3], APIinstructions.newElseIf($$[$0]), undefined); 
break;
case 61:
 this.$ = APIinstructions.newSwitch($$[$0-5], $$[$0-2], $$[$0-1]); 
break;
case 62:
 this.$ = APIinstructions.newSwitch($$[$0-4], $$[$0-1], undefined); 
break;
case 63:
 this.$ = APIinstructions.newSwitch($$[$0-4], undefined, $$[$0-1]); 
break;
case 64:
 this.$ = APIinstructions.newSwitch($$[$0-3], undefined, undefined); 
break;
case 65:
 this.$ = APIinstructions.newListCases($$[$0-1], $$[$0]); 
break;
case 66:
 this.$ = APIinstructions.newListCases(undefined, $$[$0]); 
break;
case 67:
 this.$ = APIinstructions.newCase($$[$0-2], $$[$0]); 
break;
case 68:
 this.$ = APIinstructions.newDefault($$[$0]); 
break;
case 69:
 this.$ = APIinstructions.newFor($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 70:
 this.$ = APIinstructions.newDeclarationFor($$[$0-3], $$[$0-2], $$[$0]); 
break;
case 71:
 this.$ = APIinstructions.newDeclarationFor(undefined, $$[$0-2], $$[$0]); 
break;
case 72: case 73:
 this.$ = APIinstructions.newNextFor($$[$0-1], $$[$0]); 
break;
case 74:
 this.$ = APIinstructions.newNextFor($$[$0], undefined); 
break;
case 75:
 this.$ = APIinstructions.newWhile($$[$0-4], $$[$0-1]); 
break;
case 76:
 this.$ = APIinstructions.newDoWhile($$[$0-2], $$[$0-6]); 
break;
case 77:
 this.$ = APIinstructions.newUnaryOP($$[$0], OPERATION_TYPE.NEGATE); 
break;
case 78:
 this.$ = APIinstructions.newUnaryOP($$[$0], OPERATION_TYPE.NOT); 
break;
case 79:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.ADDITION) 
break;
case 80:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.SUBTRACTION) 
break;
case 81:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.MULTIPLICATION) 
break;
case 82:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.DIVISION) 
break;
case 83:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.MODULE) 
break;
case 84:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.POTENCY) 
break;
case 85:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.MAJOR_THAN) 
break;
case 86:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.LESS_THAN) 
break;
case 87:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.MAJOR_EQUALS_THAN) 
break;
case 88:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.LESS_EQUALS_THAN) 
break;
case 89:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.EQUALS_EQUALS) 
break;
case 90:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.DIFFERENT) 
break;
case 91:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.OR) 
break;
case 92:
 this.$ = APIinstructions.newBinaryOP($$[$0-2], $$[$0], OPERATION_TYPE.AND) 
break;
case 94:
 this.$ = APIinstructions.newCallFun($$[$0-3], $$[$0-1]); 
break;
case 95:
 this.$ = APIinstructions.newCallFun($$[$0-2], undefined); 
break;
case 96:
 this.$ = APIinstructions.newValue($$[$0], TYPES.ID); 
break;
case 97:
 this.$ = APIinstructions.newValue($$[$0], TYPES.INTEGER); 
break;
case 98:
 this.$ = APIinstructions.newValue($$[$0], TYPES.DOUBLE); 
break;
case 99:
 this.$ = APIinstructions.newValue($$[$0], TYPES.STRING); 
break;
case 100:
 this.$ = APIinstructions.newValue($$[$0], types.CHAR); 
break;
case 101: case 102:
 this.$ = APIinstructions.newValue($$[$0], TYPES.BOOLEAN); 
break;
case 103:
 this.$ = APIinstructions.newListExpression($$[$0-2], $$[$0]); 
break;
case 104:
 this.$ = APIinstructions.newListExpression(undefined, $$[$0]); 
break;
}
},
table: [{3:1,4:2,5:3,6:[1,4],7:5,8:$V0,11:6,12:$V1},{1:[3]},{5:9,6:[1,10],7:11,8:$V0,11:6,12:$V1},{6:[1,12],11:13,12:$V1},{1:[2,4]},o($V2,[2,6]),o($V3,[2,9]),{9:[1,14]},{9:[1,15]},{6:[1,16],11:13,12:$V1},{1:[2,2]},o($V2,[2,5]),{1:[2,3]},o($V3,[2,8]),{10:[1,17]},{13:[1,18]},{1:[2,1]},o($V2,[2,7]),{14:19,15:[1,20],16:21,17:22,18:23,19:24,24:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9},{15:[1,31],16:32,17:22,18:23,19:24,24:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9},o($V3,[2,11]),o($Va,[2,13]),o($Va,[2,14]),o($Va,[2,15]),{9:[1,34],48:33},{9:[1,35],25:[1,36]},{9:[2,21]},{9:[2,22]},{9:[2,23]},{9:[2,24]},{9:[2,25]},o($V3,[2,10]),o($Va,[2,12]),{10:[1,37],31:[1,39],49:[1,38]},o($Vb,$Vc,{20:[1,40]}),{20:[1,41]},{20:[1,42]},o($Vd,[2,46]),{9:$Ve,20:$Vf,47:43,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:[1,54]},{19:58,21:55,22:[1,56],26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,32:57},{19:58,21:59,22:[1,60],26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,32:57},{22:[1,61]},{10:[1,62],73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB},{9:$Ve,20:$Vf,47:77,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$Ve,20:$Vf,47:78,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$Ve,20:$Vf,47:79,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},o($VC,[2,96],{20:[1,80]}),o($VC,[2,97]),o($VC,[2,98]),o($VC,[2,99]),o($VC,[2,100]),o($VC,[2,101]),o($VC,[2,102]),o($Vb,[2,48]),{22:[1,81],31:$VD},{13:[1,83]},o($VE,[2,27]),{9:[1,84]},{22:[1,85],31:$VD},{13:[1,86]},{13:[1,87]},o($Vd,[2,47]),{9:$Ve,20:$Vf,47:88,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$Ve,20:$Vf,47:89,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$Ve,20:$Vf,47:90,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$Ve,20:$Vf,47:91,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$Ve,20:$Vf,47:92,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$Ve,20:$Vf,47:93,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$Ve,20:$Vf,47:94,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$Ve,20:$Vf,47:95,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$Ve,20:$Vf,47:96,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$Ve,20:$Vf,47:97,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$Ve,20:$Vf,47:98,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$Ve,20:$Vf,47:99,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$Ve,20:$Vf,47:100,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$Ve,20:$Vf,47:101,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},o($VC,[2,77]),o($VC,[2,78]),{22:[1,102],73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB},{9:$Ve,20:$Vf,22:[1,104],47:105,50:103,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{13:[1,106]},{19:58,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,32:107},{9:$VF,17:110,19:121,23:108,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:109,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},o($VE,[2,28]),{13:[1,132]},{9:$VF,17:110,19:121,23:133,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:109,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},{9:$VF,17:110,19:121,23:134,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:109,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},o($VP,[2,79],{76:$Vq,77:$Vr,78:$Vs,79:$Vt}),o($VP,[2,80],{76:$Vq,77:$Vr,78:$Vs,79:$Vt}),o($VQ,[2,81],{79:$Vt}),o($VQ,[2,82],{79:$Vt}),o($VQ,[2,83],{79:$Vt}),o($VC,[2,84]),o($VR,[2,85],{73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt}),o($VR,[2,86],{73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt}),o($VR,[2,87],{73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt}),o($VR,[2,88],{73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt}),o($VS,[2,89],{73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx}),o($VS,[2,90],{73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx}),o([10,22,31,64,69,70,86],[2,91],{73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,87:$VB}),o([10,22,31,64,69,70,86,87],[2,92],{73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz}),o($VC,[2,93]),{22:[1,135],31:$VT},o($VC,[2,95]),o($VE,[2,104],{73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB}),{9:$VF,17:110,19:121,23:137,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:109,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},o($VE,[2,26]),{9:$VF,15:[1,138],17:110,19:121,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:139,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},o($VU,[2,30]),o($VU,[2,31]),o($VU,[2,32]),o($VU,[2,33]),o($VU,[2,34]),o($VU,[2,35]),o($VU,[2,36]),o($VU,[2,37]),o($VU,[2,38]),o($VU,[2,39]),o($VU,[2,40]),o($VU,[2,41]),{9:[1,140],48:33},{20:[1,142],49:[1,141]},{52:[1,143]},{20:[1,144]},{20:[1,145]},{20:[1,146]},{20:[1,147]},{13:[1,148]},{10:[1,149]},{10:[1,150]},{9:$Ve,10:[1,152],20:$Vf,47:151,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$VF,17:110,19:121,23:153,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:109,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},{9:$VF,15:[1,154],17:110,19:121,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:139,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},{9:$VF,15:[1,155],17:110,19:121,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:139,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},o($VC,[2,94]),{9:$Ve,20:$Vf,47:156,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$VF,15:[1,157],17:110,19:121,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:139,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},o($Va,[2,17]),o($VU,[2,29]),o($Vb,$Vc),{9:$Ve,20:$Vf,47:158,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$Ve,20:$Vf,22:[1,159],47:105,50:160,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{53:[1,161]},{9:$Ve,20:$Vf,47:162,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$Ve,20:$Vf,47:163,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:[1,166],19:165,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,67:164},{9:$Ve,20:$Vf,47:167,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$VF,17:110,19:121,23:168,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:109,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},o($VU,[2,42]),o($VU,[2,43]),{10:[1,169],73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB},o($VU,[2,45]),{9:$VF,15:[1,170],17:110,19:121,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:139,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},o($Va,[2,19]),o($Va,[2,20]),o($VE,[2,103],{73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB}),o($Va,[2,16]),{10:[1,171],73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB},{10:[1,172]},{22:[1,173],31:$VT},{52:[1,174]},{22:[1,175],73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB},{22:[1,176],73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB},{10:[1,177]},{9:[1,178]},{49:[1,179]},{22:[1,180],73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB},{9:$VF,15:[1,181],17:110,19:121,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:139,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},o($VU,[2,44]),o($Va,[2,18]),o($VU,[2,50]),o($VU,[2,51]),{10:[1,182]},{54:183,55:[1,184],56:[1,185]},{13:[1,186]},{13:[1,187]},{9:$Ve,20:$Vf,47:188,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{49:[1,189]},{9:$Ve,20:$Vf,47:190,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{13:[1,191]},{71:[1,192]},o($VU,[2,52]),{10:[1,193]},{20:[1,194]},{20:[1,195]},{9:$VF,17:110,19:121,23:196,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:109,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},{15:[1,199],60:197,61:198,62:200,63:$VV,65:$VW},{10:[1,203],73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB},{9:$Ve,20:$Vf,47:204,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{10:[2,71],73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB},{9:$VF,17:110,19:121,23:205,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:109,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},{20:[1,206]},o($VU,[2,53]),{9:$Ve,20:$Vf,22:[1,208],47:207,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$Ve,20:$Vf,22:[1,210],47:209,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$VF,15:[1,211],17:110,19:121,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:139,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},{15:[1,213],61:212,62:214,63:$VV,65:$VW},{15:[1,215]},o($VU,[2,64]),o($VX,[2,66]),{64:[1,216]},{9:$Ve,20:$Vf,47:217,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{9:$Ve,20:$Vf,47:219,68:218,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{10:[2,70],73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB},{9:$VF,15:[1,220],17:110,19:121,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:139,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},{9:$Ve,20:$Vf,47:221,73:$Vg,74:$Vh,88:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,93:$Vn},{22:[1,222],73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB},{10:[2,55]},{22:[1,223],73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB},{10:[2,57]},o($VU,[2,58],{58:[1,224]}),{15:[1,225]},o($VU,[2,62]),o($VX,[2,65]),o($VU,[2,63]),{9:$VF,17:110,19:121,23:226,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:109,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},{64:[1,227],73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB},{22:[1,228]},{22:[2,74],69:[1,229],70:[1,230],73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB},o($VU,[2,75]),{22:[1,231],73:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB},{10:[2,54]},{10:[2,56]},{13:[1,232],36:233,57:$VK},o($VU,[2,61]),{9:$VF,15:[2,68],17:110,19:121,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:139,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},{9:$VF,17:110,19:121,23:234,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:109,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},{13:[1,235]},{22:[2,72]},{22:[2,73]},{10:[1,236]},{9:$VF,17:110,19:121,23:237,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:109,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},o($VU,[2,60]),o($VX,[2,67],{17:110,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,19:121,33:139,9:$VF,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO}),{9:$VF,17:110,19:121,23:238,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:109,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},o($VU,[2,76]),{9:$VF,15:[1,239],17:110,19:121,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:139,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},{9:$VF,15:[1,240],17:110,19:121,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,33:139,34:111,35:112,36:113,37:114,38:115,39:116,40:117,41:118,42:119,43:120,44:$VG,45:$VH,46:$VI,51:$VJ,57:$VK,59:$VL,66:$VM,71:$VN,72:$VO},o($VU,[2,59]),o($VU,[2,69])],
defaultActions: {4:[2,4],10:[2,2],12:[2,3],16:[2,1],26:[2,21],27:[2,22],28:[2,23],29:[2,24],30:[2,25],208:[2,55],210:[2,57],222:[2,54],223:[2,56],229:[2,72],230:[2,73]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const OPERATION_TYPE            = require("./Instructions/instruction").OPERATIONS;
    const TYPES                     = require("./Instructions/instruction").TYPES;
    const APIinstructions           = require("./Instructions/instruction").APIinstructions;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 88
break;
case 2:return 89
break;
case 3:return 90
break;
case 4:return 91
break;
case 5:return 92
break;
case 6:return 93
break;
case 7:return 69
break;
case 8:return 70
break;
case 9:return 79
break;
case 10:return 76
break;
case 11:return 77
break;
case 12:return 78
break;
case 13:return 75
break;
case 14:return 73
break;
case 15:return 83
break;
case 16:return 82
break;
case 17:return 84
break;
case 18:return 85
break;
case 19:return 81
break;
case 20:return 80
break;
case 21:return 86
break;
case 22:return 87
break;
case 23:return 74
break;
case 24:return 49
break;
case 25:return 10
break;
case 26:return 64
break;
case 27:return 13
break;
case 28:return 15
break;
case 29:return 20
break;
case 30:return 22
break;
case 31:return 31
break;
case 32:return 26
break;
case 33:return 27
break;
case 34:return 30
break;
case 35:return 28
break;
case 36:return 29
break;
case 37:return 12
break;
case 38:return 8
break;
case 39:return 57
break;
case 40:return 58
break;
case 41:return 59
break;
case 42:return 63
break;
case 43:return 65
break;
case 44:return 45
break;
case 45:return 71
break;
case 46:return 72
break;
case 47:return 66
break;
case 48:return 44
break;
case 49:return 46
break;
case 50:return 24
break;
case 51:return 25
break;
case 52:return 51
break;
case 53:return 52
break;
case 54:return 53
break;
case 55:return 55
break;
case 56:return 56
break;
case 57:return 9
break;
case 58:return 6
break;
case 59: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/]([0-9]+))/,/^(?:(([0-9]+)(\.([0-9]+))?))/,/^(?:(("[^\"]*")))/,/^(?:(('[^\']*')))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\+)/,/^(?:-)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:;)/,/^(?::)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:System\b)/,/^(?:\.)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}